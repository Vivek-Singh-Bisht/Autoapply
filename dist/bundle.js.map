{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://chrome-extension-boilerplate-react/./src/constants/constants.ts","webpack://chrome-extension-boilerplate-react/./src/sites/foundit/foundit.ts","webpack://chrome-extension-boilerplate-react/./src/sites/instahyre/instahyre.ts","webpack://chrome-extension-boilerplate-react/./src/sites/linkedin/functions.ts","webpack://chrome-extension-boilerplate-react/./src/sites/linkedin/linkedin.ts","webpack://chrome-extension-boilerplate-react/webpack/bootstrap","webpack://chrome-extension-boilerplate-react/webpack/runtime/define property getters","webpack://chrome-extension-boilerplate-react/webpack/runtime/hasOwnProperty shorthand","webpack://chrome-extension-boilerplate-react/webpack/runtime/make namespace object","webpack://chrome-extension-boilerplate-react/./src/index.ts"],"sourcesContent":["export const INSTAHYRE = 'INSTAHYRE';\nexport const FOUNDIT = 'FOUNDIT';\nexport const LINKEDIN = 'LINKEDIN';\nexport const quesionarie = {\n    // SALARY RELATED QUESTIONS\n    'What is your Current (CTC) Salary ~ Rupees in LPA(Lakh Per Annum)': 15,\n    'What is your Expected (ECTC) Salary ~ Rupees in LPA(Lakh Per Annum)': 18,\n    \"What's your current CTC in LPA\": 15,\n    \"What's your expected CTC in LPA\": 18,\n    'What is your current in Hand Salary': 115000,\n    'Your Current Salary (In LPA)': 15,\n    'Expected Salary (In LPA)': 18,\n    'What is your current CTC in lakhs': 15,\n    'Expected annual CTC': 1800000,\n    'current annual CTC': 1440000,\n    'Current CTC': 1440000,\n    'expected CTC': 1800000,\n    'your CTC': 1440000,\n    'annual CTC': 1440000,\n    'ECTC': 1800000,\n    'Expected CTC': 1800000,\n    'CTC': 1440000,\n    // NOTICE PERIOD RELATED QUESTIONS\n    'How soon you can join': 30,\n    'How immediate can you join': 30,\n    'In how many days': 30,\n    'No. of Days': 30,\n    'you will be join': 30,\n    'Your Notice Period': 30,\n    'How many days is your notice period': 30,\n    'What is your Notice Period': 30,\n    'Notice Period': 30,\n    'Notice period not more than 30 Days': 15,\n    // EXPERIENCE RELATED QUESTIONS\n    'How many years of': 3,\n    'Experience': 3,\n};\n","const foundit = () => {\n    console.log(\">>>>>>>>>>>foundit running\");\n};\nexport default foundit;\n","const instahyre = () => {\n    console.log(\">>>>>>>>>>>instahyre running\");\n    setTimeout(() => {\n        setInterval(() => {\n            const applyBtn = document.querySelector('.btn.btn-lg.btn-primary.new-btn');\n            console.log(\">>>>>>>found apply button, Clikcking !!\");\n            applyBtn === null || applyBtn === void 0 ? void 0 : applyBtn.click();\n        }, 3000);\n    }, 1000);\n};\nexport default instahyre;\n","import { quesionarie } from \"../../constants/constants\";\nexport const openAllFilters = () => new Promise((res) => {\n    let allFiltersButtonInterval = setInterval(() => {\n        let allFiltersButton = document.querySelector('[aria-label=\"Show all filters. Clicking this button displays all available filter options.\"]');\n        if (allFiltersButton instanceof HTMLElement) {\n            clearInterval(allFiltersButtonInterval);\n            allFiltersButton.click();\n            // change Filters From here\n            setTimeout(() => { applyFilters({ sortByMostRecent: true, easyApply: true }, res); }, 500);\n        }\n    }, 500);\n});\nconst applyFilters = ({ sortByMostRecent = true, easyApply = true }, res) => {\n    let advanceFilterPanel = document.querySelector('[aria-labelledby=\"reusable-search-advanced-filters-right-panel\"]');\n    // sort by most recent\n    if (sortByMostRecent && advanceFilterPanel) {\n        let mostRecentToggle = advanceFilterPanel.querySelector('[for=\"advanced-filter-sortBy-DD\"]');\n        if (mostRecentToggle instanceof HTMLElement)\n            mostRecentToggle.click();\n    }\n    // filter for easy apply\n    if (easyApply && advanceFilterPanel) {\n        let easyApplyToggleParent = advanceFilterPanel.querySelector('.artdeco-toggle--32dp');\n        let easyApplyToggle = easyApplyToggleParent === null || easyApplyToggleParent === void 0 ? void 0 : easyApplyToggleParent.querySelector('.artdeco-toggle__button');\n        if (easyApplyToggleParent instanceof HTMLElement && easyApplyToggle) {\n            if (easyApplyToggle.getAttribute('aria-checked') === 'false')\n                easyApplyToggleParent.click();\n        }\n    }\n    //All filters applied -> SHOW RESULTS\n    let showResultsButton = advanceFilterPanel && advanceFilterPanel.querySelector('.reusable-search-filters-buttons');\n    if (showResultsButton instanceof HTMLElement) {\n        let showButtonInterval = setInterval(() => {\n            if (document.querySelector('[for=\"advanced-filter-sortBy-DD\"]')) {\n                showResultsButton = document.getElementsByClassName('reusable-search-filters-buttons')[0];\n                showResultsButton instanceof HTMLElement && (showResultsButton === null || showResultsButton === void 0 ? void 0 : showResultsButton.click());\n            }\n            else {\n                setTimeout(() => { res('All Filters Applied Successfully!'); }, 3000);\n                clearInterval(showButtonInterval);\n            }\n        }, 500);\n    }\n};\nexport const applyForJob = (job) => new Promise((res) => {\n    var _a;\n    let clickableElement = job.getElementsByClassName('job-card-container--clickable')[0];\n    const companySpan = clickableElement.querySelector('span[dir=\"ltr\"]');\n    const companyName = companySpan instanceof HTMLElement && ((_a = companySpan.textContent) === null || _a === void 0 ? void 0 : _a.trim());\n    console.log(\">>>>>>>>>>>>1111->applying for\", companyName);\n    if (clickableElement instanceof HTMLElement) {\n        setTimeout(() => {\n            clickableElement.click();\n            clickNextUntilReview();\n        }, 500);\n    }\n    // click next until questionarie begins\n    const clickNextUntilReview = () => setTimeout(() => {\n        let jobApplyButton = document.querySelector('.jobs-apply-button');\n        console.log(\">>>>>>>>>>>222->jobApplyButton\", jobApplyButton);\n        jobApplyButton instanceof HTMLElement && jobApplyButton.click();\n        let firstStepInterval = setInterval(() => {\n            let ApplicationForm = Array.from(document.querySelectorAll('[aria-label]'))\n                .find(el => { var _a; return (_a = el.getAttribute('aria-label')) === null || _a === void 0 ? void 0 : _a.includes('Your job application progress'); });\n            const nextButton = document === null || document === void 0 ? void 0 : document.querySelector('[data-easy-apply-next-button]');\n            const submitButton = document.querySelector('[aria-label=\"Submit application\"]');\n            if (nextButton instanceof HTMLElement) {\n                console.log(\">>>>>>>>>>>>>>>333->nextButton\", nextButton);\n                setTimeout(() => {\n                    nextButton.click();\n                    clearInterval(firstStepInterval);\n                    startQuestionarie();\n                }, 500);\n            }\n            if (submitButton instanceof HTMLElement) {\n                console.log(\">>>>>>>>>>>>>>>333->submitButton\", submitButton);\n                setTimeout(() => {\n                    submitButton.click();\n                    clearInterval(firstStepInterval);\n                    completeApplication(res);\n                }, 500);\n            }\n        }, 500);\n    }, 500);\n    // start questionarie\n    const startQuestionarie = () => setTimeout(() => {\n        setTimeout(() => {\n            // there could be any of these review and next button\n            let reviewButton = document === null || document === void 0 ? void 0 : document.querySelector('[data-live-test-easy-apply-review-button]');\n            let nextButton = document === null || document === void 0 ? void 0 : document.querySelector('[data-live-test-easy-apply-next-button]');\n            console.log(\">>>>>>>>>>>reviewButton\", reviewButton);\n            reviewButton instanceof HTMLElement && reviewButton.click();\n            nextButton instanceof HTMLElement && nextButton.click();\n            FindErrorsAndFillDetails();\n        }, 1000);\n        // wait for error messages or proceed further\n        const FindErrorsAndFillDetails = () => setTimeout(() => {\n            var _a;\n            let unfilledFields = document.querySelectorAll('.artdeco-inline-feedback__message');\n            if (unfilledFields.length) {\n                for (let i = 0; i < unfilledFields.length; i++) {\n                    let unfilledParent = (_a = unfilledFields[i]) === null || _a === void 0 ? void 0 : _a.closest('.fb-dash-form-element');\n                    if (unfilledParent) {\n                        let selectElement = unfilledParent.querySelector('select'); // Find select inside the parent\n                        let radioFieldset = unfilledParent.querySelector('fieldset[data-test-form-builder-radio-button-form-component=\"true\"]'); // Find the radio fieldset\n                        // field is select, so just select yes\n                        if (selectElement) {\n                            let yesOption = selectElement.querySelector('option[value=\"Yes\"]'); // Find the \"Yes\" option\n                            if (yesOption) {\n                                selectElement.value = \"Yes\"; // Set the value\n                                selectElement.dispatchEvent(new Event('change', { bubbles: true })); // Trigger change event\n                            }\n                        }\n                        // field is radio, so just select yes\n                        if (radioFieldset) {\n                            let yesRadioButton = radioFieldset.querySelector('input[type=\"radio\"][value=\"Yes\"]'); // Find the \"Yes\" radio button\n                            if (yesRadioButton) {\n                                yesRadioButton.checked = true; // Select the \"Yes\" option\n                                yesRadioButton.dispatchEvent(new Event('change', { bubbles: true })); // Trigger change event\n                            }\n                        }\n                        // field is input, read question and fill answer by qestionarie\n                        if (!selectElement && !radioFieldset) {\n                            const labelElement = unfilledParent.querySelector('label'); // Find the label inside the parent\n                            const inputElement = unfilledParent.querySelector('input[type=\"text\"]'); // Find the input field\n                            console.log(labelElement, \">>>>>>>>>>>>>>>>>>4444->inputElement\", inputElement);\n                            if (labelElement && inputElement) {\n                                const questionText = labelElement.innerText.trim(); // Get the label text\n                                console.log(labelElement, \">>>>>>>>>>>>>>>>>>5555->questionText\", questionText);\n                                // Find a key in the quesionarie object that is included in the question text\n                                const matchedKey = Object.keys(quesionarie)\n                                    .find(key => questionText.toLowerCase().includes(key.toLowerCase()));\n                                if (matchedKey) {\n                                    // @ts-ignore - Ignore TypeScript error for this line\n                                    inputElement.value = quesionarie[matchedKey]; // Fill the input field\n                                    console.log(\">>>>>>>>>6666->matchedKey\", matchedKey);\n                                    inputElement.dispatchEvent(new Event('input', { bubbles: true })); // Trigger input event\n                                    console.log(`>>>>>>>>>7777->matchedKeyFilled: \"${questionText}\" with value: ${quesionarie[matchedKey]}`);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            completeApplication(res);\n        }, 2000);\n        completeApplication(res);\n    }, 2000);\n});\nconst completeApplication = (res) => {\n    let completeApplicationInterval = setInterval(() => {\n        var _a;\n        let completeApplicationButton = document.querySelector('[aria-label=\"Submit application\"]');\n        if (completeApplicationButton && completeApplicationButton instanceof HTMLElement) {\n            let companyNameHeader = document.getElementById('jobs-apply-header');\n            let companyName = companyNameHeader instanceof HTMLElement && ((_a = companyNameHeader.textContent) === null || _a === void 0 ? void 0 : _a.trim());\n            completeApplicationButton.click();\n            //wait for completed modal and close it\n            let finalModalInterval = setInterval(() => {\n                let finalModalCloseButton = document.querySelector('[aria-label=\"Dismiss\"]');\n                if (finalModalCloseButton && finalModalCloseButton instanceof HTMLElement) {\n                    finalModalCloseButton.click();\n                    clearInterval(finalModalInterval);\n                    console.log(\">>>>>>>>>>>>8888->Applied Successully for\", companyName);\n                    clearInterval(completeApplicationInterval);\n                    setTimeout(() => { res && res('Applied Successully'); }, 2000);\n                }\n            }, 1000);\n        }\n    }, 1000);\n};\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { applyForJob, openAllFilters } from \"./functions\";\nconst linkedin = () => {\n    setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {\n        yield openAllFilters();\n        const jobListWrapper = document.getElementsByClassName('scaffold-layout__list')[0];\n        const jobList = jobListWrapper === null || jobListWrapper === void 0 ? void 0 : jobListWrapper.querySelector('ul');\n        if (jobList instanceof HTMLElement) {\n            for (let i = 0; i < jobList.children.length; i++) {\n                let job = jobList.children[i];\n                yield applyForJob(job);\n            }\n        }\n    }), 2000);\n};\nexport default linkedin;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { FOUNDIT, INSTAHYRE, LINKEDIN } from \"./constants/constants\";\nimport foundit from \"./sites/foundit/foundit\";\nimport instahyre from \"./sites/instahyre/instahyre\";\nimport linkedin from \"./sites/linkedin/linkedin\";\nconst currentUrl = window.location.href;\nlet currentSite = '';\nif (currentUrl.includes('instahyre'))\n    currentSite = INSTAHYRE;\nif (currentUrl.includes('foundit'))\n    currentSite = FOUNDIT;\nif (currentUrl.includes('linkedin'))\n    currentSite = LINKEDIN;\nswitch (currentSite) {\n    case INSTAHYRE:\n        instahyre();\n        break;\n    case FOUNDIT:\n        foundit();\n        break;\n    case LINKEDIN:\n        linkedin();\n        break;\n}\n"],"names":[],"sourceRoot":""}